provider "helm" {
  kubernetes {
    host = azurerm_kubernetes_cluster.default.kube_config[0].host

    client_certificate     = base64decode(azurerm_kubernetes_cluster.default.kube_config.0.client_certificate)
    client_key             = base64decode(azurerm_kubernetes_cluster.default.kube_config.0.client_key)
    cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.default.kube_config.0.cluster_ca_certificate)
  }
}

locals {
  ingress_service_principal_json = base64encode(jsonencode({
    clientId                       = azuread_application.default.application_id
    clientSecret                   = azuread_application_password.default.value
    subscriptionId                 = data.azurerm_subscription.current.subscription_id
    tenantId                       = data.azuread_client_config.current.tenant_id
    activeDirectoryEndpointUrl     = "https://login.microsoftonline.com",
    resourceManagerEndpointUrl     = "https://management.azure.com/",
    activeDirectoryGraphResourceId = "https://graph.windows.net/",
    sqlManagementEndpointUrl       = "https://management.core.windows.net:8443/",
    galleryEndpointUrl             = "https://gallery.azure.com/",
    managementEndpointUrl          = "https://management.core.windows.net/"
  }))
}

# Install a load-balanced ingress onto the cluster
resource "helm_release" "ingress" {
  name       = "application-gateway-kubernetes-ingress"
  repository = "https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/"
  chart      = "ingress-azure"
  version    = "1.5.2"
  namespace  = "kube-system"

  values = [
    <<EOF
verbosityLevel: 3

appgw:
    applicationGatewayID: ${azurerm_application_gateway.gateway.id}

    # Setting appgw.shared to "true" will create an AzureIngressProhibitedTarget CRD.
    # This prohibits AGIC from applying config for any host/path.
    # Use "kubectl get AzureIngressProhibitedTargets" to view and change this.
    shared: false

################################################################################
# Specify which kubernetes namespace the ingress controller will watch
# Default value is "default"
# Leaving this variable out or setting it to blank or empty string would
# result in Ingress Controller observing all acessible namespaces.
#
# kubernetes:
#   watchNamespace: <namespace>
################################################################################
# Specify the authentication with Azure Resource Manager
#
# Two authentication methods are available:
# - Option 1: AAD-Pod-Identity (https://github.com/Azure/aad-pod-identity)
# TODO: use this instead, using the generated default identity (az identity list)
#armAuth:
#    type: aadPodIdentity
#    identityResourceID: <identityResourceId>
#    identityClientID:  <identityClientId>

## Alternatively you can use Service Principal credentials
armAuth:
  type: servicePrincipal
  # This value is now generated by Terraform, but can also be generated by: 
  # "az ad sp create-for-rbac --role="Contributor" --scopes="/subscriptions/$SUBSCRIPTION_ID" --sdk-auth | base64 -w0"
  secretJSON: ${local.ingress_service_principal_json}

rbac:
  enabled: true
EOF
  ]

  lifecycle {
    ignore_changes = [values]
  }
}